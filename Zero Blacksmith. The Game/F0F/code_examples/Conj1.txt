fun Bisection1(f, a , b, repetitions, tolerance)
{   
    var fa = f(a);
    var fb = f(b);
    if (fa * fb < 0){
        var i = 0 ;
        while(i < repetitions){
            var c = (a + b) / 2 ; // c = a + (b - a) / 2 ;
            var fc = f(c);
            if (abs(fc) < tolerance || abs(a-b) < tolerance) 
            {
                return c ;
            }
            if (fa * fc < 0){
                b = c;
            }
            else{ a = c;}
            i = i + 1 ;
            var fa = f(a);
            var fb = f(b);
        }
        return (a + b) / 2 ;
    }
    return 0;
}

fun RegulaFalsi1(f, x0, x1, repetitions, tolerance)
{   
    var f0 = f(x0) ;
    var f1 = f(x1) ;
    var i = 0 ;
    var x ;
    while(i < repetitions){
        
        if ((f1 - f0) < 0.00000000000001) {
            // carefull with dividing on 0
            return x0;
        }
        x =  ((x1 * f0) - (x0 * f1)) / (f0 - f1) ;
        var fx = f(x);
        if (abs(fx) < tolerance || abs(x - x1) < tolerance) 
        {
            return x ;
        }
        if (f0 * fx < 0){
            x1 = x;
            f1 = fx;
        }
        else{ 
            x0 = x;
            f0 = fx;
        }
        i = i + 1 ;
    }
    return x0 ;
}

fun Newton1(f, x0, repetitions, tolerance)
{   
    var f0 = f(x0);
    var i = 0 ;
    var x ;
    while(i < repetitions){
        var df0 = derivative(f, x0) ;
        if (df0 < 0.00000000000001) {
            // carefull with dividing on 0
            return x0;
        }
        x = x0 -  ( f0 / df0) ;
        var fx = f(x);
        if (abs(fx) < tolerance || abs(x - x0) < tolerance) 
        {
            return x ;
        }
        i = i + 1 ;
        x0 = x ;
        f0 = f(x0);
    }
    return x0 ;
}

fun Secant1(f, x0 , x1, repetitions, tolerance)
{   
    var f0 = f(x0);
    var f1 = f(x1);
    var i = 0 ;
    var x ;
    while(i < repetitions){
        if ((f1 - f0) < 0.00000000000001) {
            return x1;
        }
        x = x1 - f1 * ((x1 - x0) / (f1 - f0)) ;
        var fx = f(x);
        if (abs(fx) < tolerance || abs(x1-x) < tolerance) 
        {
            return x ;
        }
        i = i + 1 ;
        x0 = x1 ;
        x1 = x ;
        f0 = f(x0);
        f1 = f(x1);
    }
    return x1 ;
}
fun get_min (f, a, b)
{
    var absfa = abs(f(a)) ;
    var absfb = abs(f(b)) ;
    if (absfa <= absfb){
        return a;
    }
    else {return b;}
}
Forge (f, min, max)
{
    var fmin = f(min) ;
    var fmax = f(max) ;
    if (fmin * fmax < 0){
        var RFx = RegulaFalsi1(f, min, max, 40, 0.000001);
        var fRFx = f(RFx) ;
        if (abs(fRFx) <= 0.000001) 
        {
            return RFx ;
        }
        var BISx = Bisection1(f, min, max, 40, 0.000001);
        var fBISx = f(BISx) ;
        if (abs(fBISx) <= 0.000001) 
        {
            return BISx ;
        }
        return get_min(f,RFx, BISx) ;
    }
    else {
        var N1x = Newton1(f, min, 35, 0.000001);
        var fN1x = f(N1x) ;
        if (abs(fN1x) <= 0.000001) {
            return N1x ;
        }
        var N2x = Newton1(f, max, 35, 0.000001);
        var fN2x = f(N2x) ;
        if (abs(fN2x) <= 0.000001) {
            return N2x ;
        }
        var Sx = Secant1(f, min, max, 40, 0.000001);
        var fSx = f(Sx) ;
        if (abs(fSx) <= 0.000001) 
        {
            return Sx ;
        }
        return get_min(f,get_min(f,N1x, N2x), Sx) ;
    }
}